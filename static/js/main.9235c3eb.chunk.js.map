{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onOpenModal","setState","open","onCloseModal","state","item","react_default","a","createElement","className","onClick","src","image","name","status","species","index_es","onClose","center","id","gender","origin","created","location","React","Component","App","handleSearch","event","term","target","value","shows","slider","_this2","fetch","then","response","json","data","slide","i","push","results","_this$state","console","log","lib_default","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","responsive","breakpoint","settings","map","itm","key","type","placeholder","onChange","filter","x","toLowerCase","includes","searchingFor","components_Home","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9235c3eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Modal from 'react-responsive-modal';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    }\n  }\n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ open: false });\n  };\n  render() {\n    const { item } = this.props;\n    return (\n      <div className=\"box\">\n        <div className=\"box-in\" onClick={this.onOpenModal}>\n          <div className=\"img-box\">\n            <img src={item.image} />\n          </div>\n          <div className=\"item-desc\">\n            <h3>Name : {item.name}</h3>\n            <p>Status : {item.status}</p>\n            <p>Species : {item.species}</p>\n          </div>\n        </div>\n\n\n        <Modal open={this.state.open} onClose={this.onCloseModal} center>\n          <div className=\"box-in modal-content\">\n          <h2>{item.name}</h2>\n            <div className=\"img-box\">\n              <img src={item.image} />\n            </div>\n            <div className=\"item-desc\">\n            <p>ID : {item.id}</p>\n            <p>Status : {item.status}</p>\n            <p>Species : {item.species}</p>\n\n            <p>Gender : {item.gender}</p>\n            <p>Origin : {item.origin.name}</p>\n            <p>Created : {item.created}</p>\n            <p>Location : {item.location.name}</p>\n            </div>\n          </div>\n        </Modal>\n\n      </div>\n    );\n  }\n}\nexport default Home;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/Home.js';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Slider from \"react-slick\";\n\nconst searchingFor= (term)=> {\n  return function (x) {\n    return x.name.toLowerCase().includes(term.toLowerCase()) || !term\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      shows: [],\n      term: '',\n      slider: []\n    }\n  }\n  componentDidMount() {\n    fetch(\"https://rickandmortyapi.com/api/character/\")\n      .then(response => response.json())\n      .then(data => {\n        let slide = [];\n        for (let i = 2; i <= 15; i++) {\n          slide.push(data.results[i]);\n        }\n        this.setState({\n          shows: data.results,\n          slider: slide,\n        })\n\n      })\n  }\n  handleSearch = (event) => {\n    this.setState({\n      term: event.target.value,\n    })\n  }\n\n  render() {\n    const { shows, term, slider } = this.state;\n    var settings = {\n      dots: true,\n      infinite: false,\n      speed: 500,\n      slidesToShow: 7,\n      slidesToScroll: 1,\n      autoplay: true,\n      responsive: [\n        {\n          breakpoint: 1024,\n          settings: {\n            slidesToShow: 4,\n            slidesToScroll: 1,\n          }\n        },\n        {\n          breakpoint: 480,\n          settings: {\n            slidesToShow: 2,\n            slidesToScroll: 1,\n            dots: false,\n          }\n        }\n      ]\n    };\n    console.log(shows);\n    return (\n      <div className=\"shows-app\">\n        <header>\n          <h1 className=\"logo\">Rick and Morty</h1>\n        </header>\n        <div className=\"main\">\n          <div className=\"slider\">\n            <Slider {...settings}>\n              {slider.map((itm, i) => <div className=\"img-bx\"><img src={itm.image} key={itm.id} /></div>)}\n            </Slider>\n          </div>\n          <div className=\"search-form\">\n            <form>\n              <input type=\"text\" className=\"text\" placeholder=\"Search by name\" onChange={this.handleSearch} />\n            </form>\n          </div>\n          <div className=\"box-outer\">\n            {shows.filter(searchingFor(term)).map(item => <Home key={item.id}\n              item={item} />)\n            }\n          </div>\n\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}